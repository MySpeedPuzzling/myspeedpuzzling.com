{{ form_start(solving_time_form) }}
    {{ form_errors(solving_time_form) }}

    <div class="row pb-4">
        <div class="col-lg-6 offset-lg-1 order-lg-2 mb-3">

            {% if active_puzzle is not null and prevent_puzzle_change|default(false) %}
            <div>
                <h5>{{ 'add_time.chosen_puzzle'|trans }}</h5>

                {{ include('_puzzle_name.html.twig', {
                    puzzle_name: active_puzzle.puzzleName,
                    alternative_puzzle_name: active_puzzle.puzzleAlternativeName,
                }) }}

                <br>
                <b>{{ active_puzzle.manufacturerName|upper }}</b><br>
                {{ 'pieces_count'|trans({ '%count%': active_puzzle.piecesCount })|raw }}<br>

                {% if active_puzzle.puzzleImage is not null%}
                    <p>
                        <img class="rounded-2" style="max-width: 200px;max-height: 200px;" src="{{ active_puzzle.puzzleImage|imagine_filter('puzzle_medium') }}">
                    </p>
                {% endif %}

                {% if active_puzzle.fastestTime is not null %}
                    <table class="table-times-overview">
                        <tr>
                            <td>{{ 'puzzle_solved_count'|trans }}</td>
                            <td class="text-end">{{ active_puzzle.solvedTimes }}</td>
                        </tr>
                        <tr>
                            <td>{{ 'fastest_time'|trans }}</td>
                            <td class="text-end">{{ active_puzzle.fastestTimeSolo|puzzlingTime }}</td>
                        </tr>
                        <tr>
                            <td>{{ 'average_time'|trans }}</td>
                            <td class="text-end">{{ active_puzzle.averageTimeSolo|puzzlingTime }}</td>
                        </tr>
                    </table>
                {% endif %}

                </div>
            {% endif %}

            <div {% if active_puzzle is not null and prevent_puzzle_change|default(false) %}style="display: none;"{% endif %}>
                {% if not solving_time_form.puzzleId.vars.valid %}
                    <div class="alert alert-danger py-2 px-3" role="alert">{{ 'add_time.puzzle_needed'|trans }}</div>
                {% endif %}

                <div class="form-switch mb-4">
                    {{ form_widget(solving_time_form.addPuzzle) }}
                </div>

                <div id="existing-puzzle-form">
                    <h3 class="h5 required">{{ 'add_time.choose_puzzle'|trans }}</h3>

                    <div id="add-puzzle-chosen" class="{% if active_puzzle is null %}hidden{% endif %}">
                        <ul id="add-puzzle-chosen-item" class="widget-list">
                            {% if active_puzzle is not null %}
                                <li class="widget-list-item mb-2 widget-filter-item">
                                    <div class="form-check d-flex align-items-center">
                                        <label class="form-check-label widget-filter-item-text d-flex align-items-center" for="{{ active_puzzle.puzzleId }}">
                                            {% if active_puzzle.puzzleImage is not null %}
                                                <img class="rounded-2 me-2" src="{{ active_puzzle.puzzleImage|imagine_filter('puzzle_small') }}" style="max-width: 50px;float: left;">
                                            {% endif %}
                                            <span style="display: inline-block;">
                                                {{ include('_puzzle_name.html.twig', {
                                                    puzzle_name: active_puzzle.puzzleName,
                                                    alternative_puzzle_name: active_puzzle.puzzleAlternativeName,
                                                }) }}

                                                <br>
                                                {{ active_puzzle.manufacturerName|upper }}<br>
                                                <span class="fs-xs text-muted">{{ 'pieces_count'|trans({ '%count%': active_puzzle.piecesCount })|raw }}</span>
                                            </span>
                                        </label>
                                    </div>
                                </li>
                            {% endif %}
                        </ul>

                        <button class="btn btn-sm btn-outline-primary" id="change-link">{{ 'add_time.change_puzzle'|trans }}</button>
                    </div>

                    <div id="add-puzzle-form" class="{% if active_puzzle is not null %}hidden{% endif %}">
                        <div class="widget widget-categories mb-2">
                            <p class="mb-2"><small class="text-muted">{{ 'add_time.add_when_not_found_info'|trans }}</small></p>

                            <div id="puzzle-manufacturers" class="accordion">
                                {% for manufacturerName, manufacturerPuzzles in puzzles %}
                                    <div class="accordion-item">
                                        <h3 class="accordion-header">
                                            <a href="#{{ manufacturerName|slug }}" class="accordion-button collapsed" role="button" data-bs-toggle="collapse" aria-expanded="false" aria-controls="{{ manufacturerName|slug }}">
                                                {{ manufacturerName|upper }}
                                            </a>
                                        </h3>
                                        <div id="{{ manufacturerName|slug }}" class="accordion-collapse collapse" data-bs-parent="#puzzle-manufacturers">
                                            <div class="accordion-body">
                                                <div class="widget widget-links {% if manufacturerPuzzles|length > 7 %}widget-filter{% endif %}">
                                                    {% if manufacturerPuzzles|length > 7 %}
                                                        <div class="input-group input-group-sm mb-2">
                                                            <input type="text" class="widget-filter-search form-control rounded-end" placeholder="{{ 'search'|trans }}">
                                                            <i class="ci-search position-absolute top-50 end-0 translate-middle-y fs-sm me-3"></i>
                                                        </div>
                                                    {% endif %}

                                                    <ul class="widget-list {% if manufacturerPuzzles|length > 7 %}widget-filter-list pt-1{% endif %}" {% if manufacturerPuzzles|length > 7 %}style="height: 18rem;" data-simplebar data-simplebar-auto-hide="false"{% endif %}>
                                                        {% for puzzle in manufacturerPuzzles %}
                                                            <li class="widget-list-item mb-2 {% if manufacturerPuzzles|length > 7 %}widget-filter-item{% endif %}">

                                                                <div class="form-check d-flex align-items-center">
                                                                    <div class="me-1 checkbox-wrapper">
                                                                        <input class="form-check-input" type="radio" id="{{ puzzle.puzzleId }}" name="{{ field_name(solving_time_form.puzzleId) }}" value="{{ puzzle.puzzleId }}" {% if active_puzzle is not null and active_puzzle.puzzleId is same as puzzle.puzzleId %}checked="checked"{% endif %}>
                                                                    </div>
                                                                    <label class="form-check-label widget-filter-item-text d-flex align-items-center" for="{{ puzzle.puzzleId }}">
                                                                        {% if puzzle.puzzleImage is not null %}
                                                                            <img class="rounded-2 me-2" src="{{ puzzle.puzzleImage|imagine_filter('puzzle_small') }}" style="max-width: 50px;float: left;">
                                                                        {% endif %}
                                                                        <span style="display: inline-block;">
                                                                            {{ include('_puzzle_name.html.twig', {
                                                                                puzzle_name: puzzle.puzzleName,
                                                                                alternative_puzzle_name: puzzle.puzzleAlternativeName,
                                                                            }) }}
                                                                            <br>
                                                                            <span class="fs-xs text-muted">{{ 'pieces_count'|trans({ '%count%': puzzle.piecesCount })|raw }}</span>
                                                                        </span>
                                                                    </label>
                                                                </div>
                                                            </li>
                                                        {% endfor %}
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                </div>

                <div id="custom-puzzle-form" style="{% if not selected_add_puzzle %}display: none;{% endif %}">
                    <p>
                        <small class="text-muted">{{ 'add_time.need_approve_info'|trans }}</small>
                    </p>

                    {{ form_row(solving_time_form.puzzleName) }}

                    <div id="manufacturer-id-row" {% if selected_add_manufacturer %}style="display: none;"{% endif %}>
                        {{ form_row(solving_time_form.puzzleManufacturerId) }}

                        <div class="form-text mb-3 help-text" style="margin-top: -10px;">
                            <a href="#" class="btn btn-outline-primary btn-xs me-1" id="show-manufacturer-name">{{ 'add_time.add_manufacturer'|trans }}</a> {{ 'add_time.not_in_list'|trans }}
                        </div>
                    </div>

                    <div style="display: none;">
                        {{ form_widget(solving_time_form.addManufacturer) }}
                    </div>

                    <div id="manufacturer-name-row" {% if not selected_add_manufacturer %}style="display: none;"{% endif %}>
                        {{ form_row(solving_time_form.puzzleManufacturerName) }}

                        <div class="form-text mb-3 help-text" style="margin-top: -10px;">
                            <a href="#" class="btn btn-outline-primary btn-xs me-1" id="show-manufacturer-id">{{ 'add_time.choose_manufacturer'|trans }}</a>
                        </div>
                    </div>
                    {{ form_row(solving_time_form.puzzlePiecesCount) }}

                    {{ form_row(solving_time_form.puzzleEan) }}
                    {{ form_row(solving_time_form.puzzleIdentificationNumber) }}

                    {{ form_label(solving_time_form.puzzlePhoto) }}
                    {{ form_errors(solving_time_form.puzzlePhoto) }}

                    <div class="form-text mb-1 help-text">{{ 'forms.puzzle_photo_help'|trans }}</div>
                    <div class="file-drop-area">
                        <div class="file-drop-icon ci-cloud-upload"></div>
                        <span class="file-drop-message">{{ 'forms.drop_file'|trans }}</span>
                        {{ form_widget(solving_time_form.puzzlePhoto, {'attr': {'class': 'file-drop-input'}}) }}
                        <button type="button" class="file-drop-btn btn btn-outline-primary btn-sm">{{ 'forms.choose_file'|trans }}</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-5 order-lg-1">
            <div class="row">
                <div class="col-sm mb-3">
                    {% if active_stopwatch is not null %}
                        <span class="form-label">{{ 'add_time.time_from_stopwatch'|trans }}</span><br>
                        <span class="h5 mt-2 d-inline-block">{{ active_stopwatch.totalSeconds|puzzlingTime }}</span>
                    {% endif %}

                    <div style="{% if active_stopwatch is not null %}display: none;{% endif %}">
                        {{ form_label(solving_time_form.time) }}
                        <div class="input-group">
                            {{ form_widget(solving_time_form.time, {'attr': {'class': 'form-control rounded pe-5'}}) }}
                            {% if solving_time_form.time.vars.valid %}
                                <i class="ci-time position-absolute top-50 end-0 translate-middle-y me-3"></i>
                            {% endif %}
                        </div>
                        {{ form_help(solving_time_form.time) }}
                        {{ form_errors(solving_time_form.time) }}
                    </div>

                </div>

                <div class="col-sm mb-3">
                    {{ form_label(solving_time_form.finishedAt) }}
                    <div class="input-group">
                        {{ form_widget(solving_time_form.finishedAt, {'attr': {'class': 'form-control rounded date-picker pe-5', 'data-datepicker-options': '{"altInput": true, "altFormat": "d.m.Y", "dateFormat": "d.m.Y", "locale": "' ~ app.request.locale ~ '", "maxDate": "today"}'}}) }}
                        <i class="ci-calendar position-absolute top-50 end-0 translate-middle-y me-3"></i>
                    </div>
                    {{ form_help(solving_time_form.finishedAt) }}
                    {{ form_errors(solving_time_form.finishedAt) }}
                </div>
            </div>

            <div id="puzzlers-group">
                {% for filled_group_player in filled_group_players %}
                    {{ include('_group_puzzler_input.html.twig', {
                        inputId: loop.index,
                        inputValue: filled_group_player,
                    }) }}
                {% endfor %}
            </div>

            <button id="add-puzzler" type="button" class="btn btn-sm btn-outline-primary mb-3"><i class="ci-add"></i> {{ 'add_time.add_puzzler'|trans }}</button>

            {{ form_row(solving_time_form.comment) }}

            {{ form_label(solving_time_form.finishedPuzzlesPhoto) }}
            {{ form_errors(solving_time_form.finishedPuzzlesPhoto) }}
            <div class="file-drop-area">
                <div class="file-drop-icon">
                    {% if solved_puzzle is defined and solved_puzzle.finishedPuzzlePhoto is not null%}
                        <div class="file-drop-preview img-thumbnail rounded">
                            <img class="rounded-2" style="max-width: 200px;max-height: 200px;" src="{{ solved_puzzle.finishedPuzzlePhoto|imagine_filter('puzzle_medium') }}">
                        </div>
                    {% endif %}
                    <i class="ci-cloud-upload"></i>
                </div>

                <span class="file-drop-message">{{ 'forms.drop_file'|trans }}</span>
                {{ form_widget(solving_time_form.finishedPuzzlesPhoto, {'attr': {'class': 'file-drop-input'}}) }}
                <button type="button" class="file-drop-btn btn btn-outline-primary btn-sm">{{ 'forms.choose_file'|trans }}</button>
            </div>

            <input type="submit" name="submit" value="{{ 'forms.save'|trans }}" class="btn btn-primary mt-3" />

        </div>
    </div>

{{ form_end(solving_time_form) }}

<div id="puzzler-input-template">
    {{ include('_group_puzzler_input.html.twig') }}
</div>

<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', function() {
        // Get the checkbox element
        var checkbox = document.getElementById('puzzle_solving_time_form_addPuzzle');

        // Function to toggle the visibility of forms
        function toggleForms() {
            var existingPuzzleForm = document.getElementById('existing-puzzle-form');
            var customPuzzleForm = document.getElementById('custom-puzzle-form');

            if (checkbox.checked) {
                // Checkbox is checked: show customPuzzleForm and hide existingPuzzleForm
                customPuzzleForm.style.display = 'block';
                existingPuzzleForm.style.display = 'none';
            } else {
                // Checkbox is not checked: show existingPuzzleForm and hide customPuzzleForm
                customPuzzleForm.style.display = 'none';
                existingPuzzleForm.style.display = 'block';
            }
        }

        // Call the function to set the initial state
        toggleForms();

        // Add event listener for checkbox changes
        checkbox.addEventListener('change', toggleForms);
    });

    document.addEventListener('DOMContentLoaded', function() {
        // Listen for changes on radio inputs within the add-puzzle-form element
        document.getElementById('add-puzzle-form').addEventListener('change', function(event) {
            if(event.target.type === 'radio') {
                // Add 'hidden' class to add-puzzle-form and remove it from add-puzzle-chosen
                document.getElementById('add-puzzle-form').classList.add('hidden');
                document.getElementById('add-puzzle-chosen').classList.remove('hidden');

                // Clone the nearest parent <li> element
                var clonedLi = event.target.closest('li').cloneNode(true);

                // Remove <input> elements from the cloned <li>
                var inputs = clonedLi.querySelectorAll('input');
                inputs.forEach(function(input) {
                    input.remove();
                });

                // Replace the content of add-puzzle-chosen-item with the modified cloned <li>
                var puzzleChosenItem = document.getElementById('add-puzzle-chosen-item');
                puzzleChosenItem.innerHTML = '';
                puzzleChosenItem.appendChild(clonedLi);

                setTimeout(function() {
                    document.getElementById('add-puzzle-chosen').scrollIntoView({
                        behavior: 'smooth'
                    });
                }, 100);
            }
        });

        // Listen for click event on the change-link button
        document.getElementById('change-link').addEventListener('click', function(event) {
            // Prevent default action (submitting form)
            event.preventDefault();

            // Toggle visibility of the two main elements
            document.getElementById('add-puzzle-chosen').classList.add('hidden');
            document.getElementById('add-puzzle-form').classList.remove('hidden');
        });
    });

    document.addEventListener('DOMContentLoaded', () => {
        const addPuzzlerBtn = document.getElementById('add-puzzler');
        const puzzlersGroup = document.getElementById('puzzlers-group');
        const puzzlerTemplate = document.getElementById('puzzler-input-template').innerHTML;
        let puzzlerCounter = 0;

        addPuzzlerBtn.addEventListener('click', () => {
            if (puzzlersGroup.children.length < 6) {
                puzzlersGroup.insertAdjacentHTML('beforeend', puzzlerTemplate);
                const newPuzzler = puzzlersGroup.lastElementChild;
                initializePuzzler(newPuzzler, ++puzzlerCounter);
                updateCounters();
                checkButtonVisibility();
                disableSelectedOptionsGlobally();
            }
        });

        function initializePuzzlers() {
            const puzzlers = puzzlersGroup.querySelectorAll('.input-group');
            puzzlers.forEach((puzzler, index) => {
                initializePuzzler(puzzler, index);
            });
            disableSelectedOptionsGlobally();
            updateCounters();
            checkButtonVisibility();
        }

        function disableSelectedOptionsGlobally() {
            const selects = puzzlersGroup.querySelectorAll('.group-favorite-player-select');
            const selectedValues = Array.from(selects)
                .filter(select => select.value !== '')
                .map(select => select.value);

            selects.forEach(select => {
                Array.from(select.options).forEach(option => {
                    if (selectedValues.includes(option.value) && option.value !== select.value) {
                        option.disabled = true;
                    }
                });
            });
        }

        function initializePuzzler(puzzler, counter) {
            const input = puzzler.querySelector('input[name="group_players[]"]');
            const label = puzzler.querySelector('label');
            const select = puzzler.querySelector('.group-favorite-player-select');

            // Unique ID for input and select if needed
            if (input && select) {
                const uniqueId = `input-${counter}`;
                input.id = uniqueId;
                if (label) label.setAttribute('for', uniqueId);
                select.id = `select-${counter}`;
                adjustInputStateBasedOnSelect(select, input, true);
            }
        }

        function adjustInputStateBasedOnSelect(select, input, isInitializing = false) {
            if (isInitializing) {
                // If initializing, check if input's value (without '#') matches any select option value
                const strippedValue = input.value.startsWith('#') ? input.value.slice(1) : input.value;
                if (strippedValue && Array.from(select.options).some(option => option.value === strippedValue)) {
                    select.value = strippedValue;
                }
            }

            const selectedValue = select.value;
            if (selectedValue !== '') {
                if (!isInitializing || (isInitializing && input.value === '')) {
                    input.value = `#${selectedValue}`;
                }
                input.setAttribute('readonly', true);
            } else {
                if (!isInitializing) {
                    input.value = ''; // Only clear input if not initializing
                }
                input.removeAttribute('readonly');
            }

            updateSelectOptions(select, selectedValue);
        }

        puzzlersGroup.addEventListener('click', (event) => {
            if (event.target.closest('[data-remove-player]')) {
                const puzzler = event.target.closest('[data-puzzler]');
                if (puzzler) {
                    puzzler.remove();
                    updateCounters();
                    checkButtonVisibility();
                    updateSelectOptions();
                }
            }
        });

        puzzlersGroup.addEventListener('change', (event) => {
            if (event.target.classList.contains('group-favorite-player-select')) {
                const select = event.target;
                const input = select.closest('.input-group').querySelector('input[name="group_players[]"]');
                adjustInputStateBasedOnSelect(select, input);
            }
        });

        function updateCounters() {
            const counters = puzzlersGroup.querySelectorAll('[data-counter]');
            counters.forEach((counter, index) => {
                counter.innerHTML = index + 1;
            });
        }

        function checkButtonVisibility() {
            if (puzzlersGroup.children.length >= 6) {
                addPuzzlerBtn.classList.add('hidden');
            } else {
                addPuzzlerBtn.classList.remove('hidden');
            }
        }

        function updateSelectOptions(changedSelect = null, selectedValue = '') {
            const selects = puzzlersGroup.querySelectorAll('.group-favorite-player-select');
            selects.forEach(select => {
                const currentValue = select.value;
                const options = Array.from(select.options);

                options.forEach(option => {
                    if (option.value !== '' && option.value !== currentValue) {
                        if (option.value === selectedValue) {
                            option.disabled = true;
                        } else {
                            option.disabled = false;
                        }
                    }
                });

                // If a select is changing back to placeholder, re-enable its previous value in all other selects
                if (changedSelect && selectedValue === '') {
                    options.forEach(option => {
                        if (option.value === changedSelect.dataset.previousValue) {
                            const otherSelects = Array.from(selects).filter(s => s !== changedSelect);
                            otherSelects.forEach(otherSelect => {
                                const otherOption = Array.from(otherSelect.options).find(o => o.value === option.value);
                                if (otherOption) otherOption.disabled = false;
                            });
                        }
                    });
                }

                if (changedSelect === select) {
                    select.dataset.previousValue = selectedValue; // Keep track of the last selected value
                }

                disableSelectedOptionsGlobally();
            });
        }

        initializePuzzlers();
    });

    document.addEventListener('DOMContentLoaded', function () {
        // Function to toggle the 'hidden' class
        function toggleHiddenClass() {
            var selectInput = document.querySelector('select[data-manufacturerId]');
            var targetElement = document.getElementById('manufacturer-name-row');

            if (selectInput && targetElement) {
                // Add or remove the 'hidden' class based on whether the select has a value
                if (selectInput.value) {
                    targetElement.classList.add('hidden');
                } else {
                    targetElement.classList.remove('hidden');
                }
            }
        }

        // Initially call the function when the page loads
        toggleHiddenClass();

        // Event listener for changes on the select input
        document.addEventListener('change', function (event) {
            if (event.target.matches('select[data-manufacturerId]')) {
                toggleHiddenClass();
            }
        });
    });

    document.addEventListener('DOMContentLoaded', function() {
        var form = document.querySelector('form');
        form.addEventListener('submit', function() {
            form.querySelector('[type="submit"]').setAttribute('disabled', 'disabled');
        });
    });

    document.addEventListener("DOMContentLoaded", function() {
        // Initial setup based on the checkbox state
        toggleManufacturerVisibility();

        // Checkbox change event listener
        document.getElementById("puzzle_solving_time_form_addManufacturer").addEventListener("change", toggleManufacturerVisibility);

        // Link click event listener for showing manufacturer name
        document.getElementById("show-manufacturer-name").addEventListener("click", function(e) {
            e.preventDefault();
            document.getElementById("puzzle_solving_time_form_addManufacturer").checked = true;
            toggleManufacturerVisibility();
        });

        // Link click event listener for showing manufacturer ID
        document.getElementById("show-manufacturer-id").addEventListener("click", function(e) {
            e.preventDefault();
            document.getElementById("puzzle_solving_time_form_addManufacturer").checked = false;
            toggleManufacturerVisibility();
        });
    });

    // Function to show/hide divs based on the checkbox state
    function toggleManufacturerVisibility() {
        var isChecked = document.getElementById("puzzle_solving_time_form_addManufacturer").checked;
        document.getElementById("manufacturer-name-row").style.display = isChecked ? "block" : "none";
        document.getElementById("manufacturer-id-row").style.display = isChecked ? "none" : "block";
    }
</script>
