<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>

    <!-- Open Graph Meta Tags -->
    <meta property="og:type" content="article" />
    <meta property="og:title" content="{{ title }}" />
    <meta property="og:description" content="{{ description }}" />
    <meta property="og:image" content="{{ image_url }}" />
    <meta property="og:url" content="{{ app.request.uri }}" />

    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="{{ title }}" />
    <meta name="twitter:description" content="{{ description }}" />
    <meta name="twitter:image" content="{{ image_url }}" />

    <!-- Instagram Meta Tags (Fallback to Open Graph) -->
    <meta property="og:title" content="{{ title }}" />
    <meta property="og:image" content="{{ image_url }}" />

    <!-- Additional Meta Tags -->
    <meta name="description" content="{{ description }}">
</head>
<body>

<button id="shareButton">Share this Image</button>
<button id="downloadButton">Download Image As</button>

<p>
    <img src="{{ image_url }}" alt="{{ title }}" style="max-width: 100%;" />
</p>

<script>
    const shareImageAsset = async () => {
        try {
            const response = await fetch('{{ image_url }}');
            const blobImageAsset = await response.blob();

            const filesArray = [
                new File([blobImageAsset], '{{ title }}.png', {
                    type: 'image/png',
                    lastModified: new Date().getTime(),
                }),
            ];
            const shareData = {
                files: filesArray,
            };

            if (navigator.canShare && navigator.canShare(shareData)) {
                await navigator.share(shareData);
            } else {
                alert('Sharing is not supported on this device or browser.');
            }
        } catch (error) {
            console.error('Error sharing the image:', error);
        }
    };

    const downloadImage = async () => {
        try {
            const response = await fetch('{{ image_url }}');
            const blobImage = await response.blob();
            const url = window.URL.createObjectURL(blobImage);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = '{{ title }}.png';
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
        } catch (error) {
            console.error('Error downloading the image:', error);
            alert('An error occurred while trying to download the image.');
        }
    };

    document.getElementById('downloadButton').addEventListener('click', downloadImage);
    document.getElementById('shareButton').addEventListener('click', shareImageAsset);
</script>
</body>
</html>
