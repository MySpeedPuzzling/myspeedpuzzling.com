{% extends 'base.html.twig' %}

{% block title %}{{ 'stopwatch.meta.title'|trans }}{% endblock %}

{% block content %}
    <h1>{{ 'stopwatch.title'|trans }}</h1>

    <div class="container mt-3">
        <div class="row align-items-center justify-content-center gy-3 text-center">
            <div class="col-lg-6 col-md-8 col-sm-10">
                <div
                    class="stopwatch justify-content-center"
                    {% if active_stopwatch is not null %}
                        data-total-seconds="{{ active_stopwatch.totalSeconds }}"
                        data-stopwatch-now="{{ 'now'|date('Y-m-d H:i:s') }}"
                        data-stopwatch-start="{{ active_stopwatch.lastStart|date('Y-m-d H:i:s') }}"
                        data-stopwatch-status="{{ active_stopwatch.status.value }}"
                    {% endif %}
                >
                    <span class="countdown-hours p-1 p-sm-2 p-lg-2">
                        <span id="stopwatch-hours" class="countdown-value">{% if active_stopwatch is not null %}{{ active_stopwatch.interval|hoursElapsed }}{% else %}00{% endif %}</span>
                    </span>:
                    <span class="countdown-minutes p-1 p-sm-2 p-lg-2">
                        <span id="stopwatch-minutes" class="countdown-value">{% if active_stopwatch is not null %}{{ active_stopwatch.interval|minutesElapsed }}{% else %}00{% endif %}</span>
                    </span>:
                    <span class="countdown-seconds p-1 p-sm-2 p-lg-2">
                        <span id="stopwatch-seconds" class="countdown-value">{% if active_stopwatch is not null %}{{ active_stopwatch.interval|secondsElapsed }}{% else %}00{% endif %}</span>
                    </span>
                </div>

                <div class="mt-2">
                    {% if active_stopwatch is null %}
                        <a href="{% if active_puzzle is not null %}{{ path('start_stopwatch', {puzzleId: active_puzzle.puzzleId}) }}{% else %}{{ path('start_stopwatch') }}{% endif %}" class="btn btn-success btn-lg">
                            {{ 'stopwatch.start'|trans }}
                        </a>
                    {% elseif active_stopwatch.status.value is same as 'running' %}
                        <a href="{{ path('stop_stopwatch', {stopwatchId: active_stopwatch.stopwatchId}) }}" class="btn btn-danger btn-lg">
                            {{ 'stopwatch.stop'|trans }}
                        </a>
                    {% elseif active_stopwatch.status.value is same as 'paused' %}
                        <a href="{{ path('resume_stopwatch', {stopwatchId: active_stopwatch.stopwatchId}) }}" class="btn btn-accent btn-lg">
                            {{ 'stopwatch.continue'|trans }}
                        </a>

                        <p class="mt-3">
                            <a href="{{ path('reset_stopwatch', {stopwatchId: active_stopwatch.stopwatchId}) }}" class="btn btn-outline-danger btn-sm">
                                {{ 'stopwatch.reset'|trans }}
                            </a>
                            <a href="{{ path('finish_stopwatch', {stopwatchId: active_stopwatch.stopwatchId}) }}" class="btn btn-sm btn-outline-success">
                                {{ 'stopwatch.finish'|trans }}
                            </a>
                        </p>
                    {% endif %}
                </div>

            </div>

            <div class="col-lg-6 col-md-8 col-sm-10">
                {% if active_puzzle is not null %}
                    <strong>
                        {{ include('_puzzle_name.html.twig', {
                            puzzle_name: active_puzzle.puzzleName,
                            alternative_puzzle_name: active_puzzle.puzzleAlternativeName,
                        }) }}
                    </strong>
                    <br>
                    {{ active_puzzle.manufacturerName|upper }}<br>
                    <small class="text-muted">{{ 'pieces_count'|trans({ '%count%': active_puzzle.piecesCount })|raw }}</small><br>

                    {% if active_puzzle.puzzleImage is not null%}
                        <p>
                            <img class="rounded-2" style="max-width: 200px;max-height: 200px;" src="{{ active_puzzle.puzzleImage|imagine_filter('puzzle_medium') }}">
                        </p>
                    {% endif %}

                    {% if active_puzzle.fastestTime is not null %}
                        <table class="mb-3 table-times-overview">
                            <tr>
                                <td class="text-start">{{ 'puzzle_solved_count'|trans }}</td>
                                <td class="text-end">{{ active_puzzle.solvedTimes }}</td>
                            </tr>
                            <tr>
                                <td class="text-start">{{ 'fastest_time'|trans }}</td>
                                <td class="text-end">{{ active_puzzle.fastestTime|puzzlingTime }}</td>
                            </tr>
                            <tr>
                                <td class="text-start">{{ 'average_time'|trans }}</td>
                                <td class="text-end">{{ active_puzzle.averageTime|puzzlingTime }}</td>
                            </tr>
                        </table>
                    {% endif %}
                {% endif %}
            </div>
        </div>
    </div>

    {% if stopwatches|length > 1 or (stopwatches|length is same as 1 and active_stopwatch is null) %}
        <h3 class="mt-4">{{ 'stopwatch.more_my_stopwatches'|trans }}</h3>

        <ul>
            {% for stopwatch in stopwatches %}
                {% if active_stopwatch is null or stopwatch.stopwatchId is not same as active_stopwatch.stopwatchId %}
                    <li>
                        <a href="{{ path('stopwatch', {stopwatchId: stopwatch.stopwatchId}) }}">
                            {{ stopwatch.interval|puzzlingTime }}{% if stopwatch.puzzleId is not null %} - {{ stopwatch.puzzleName }}{% endif %} ({{ ('stopwatch.status.' ~ stopwatch.status.value)|trans }})
                        </a>
                    </li>
                {% endif %}
            {% endfor %}
        </ul>
    {% endif %}

    {% if active_stopwatch is not null %}
        <script>
            let status = document.querySelector('[data-stopwatch-status]').getAttribute('data-stopwatch-status');

            function calculateOffset() {
                var serverStartTime = new Date(document.querySelector('[data-stopwatch-now]').getAttribute('data-stopwatch-now'));
                var clientTime = new Date();
                return clientTime - serverStartTime; // Time difference in milliseconds
            }

            var offset = calculateOffset();
            console.log('Server vs client time offset: ' + offset);

            /*
            document.addEventListener('DOMContentLoaded', () => {
                if (status === 'running') {
                    let wakeLock = null;

                    try {
                        wakeLock = window.navigator.wakeLock.request('screen');
                        console.log('Screen Wake Lock is active');
                    } catch (err) {
                        console.error(`${err.name}, ${err.message}`);
                    }

                    document.addEventListener('visibilitychange', async () => {
                        if (wakeLock !== null && document.visibilityState === 'visible') {
                            wakeLock = window.navigator.wakeLock.request('screen');
                        }
                    });
                }
            });
            */

            function pad(number) {
                return number < 10 ? '0' + number : number;
            }

            function calculateTimeElapsed() {

                // Get the start time and total elapsed seconds from the data attributes
                const startTime = new Date(document.querySelector('[data-stopwatch-start]').getAttribute('data-stopwatch-start'));
                const totalElapsedSeconds = parseInt(document.querySelector('[data-total-seconds]').getAttribute('data-total-seconds'), 10);


                if (status !== 'running') {
                    return;
                }

                // To help solve
                if (offset > 2000) {
                    // 300ms because of page rendering can take some time
                    var now = new Date(new Date().getTime() - offset + 300);
                } else {
                    var now = new Date();
                }
                // Calculate the difference in seconds from now to the start time
                const differenceInSeconds = Math.floor((now - startTime) / 1000) + totalElapsedSeconds;

                // Calculate hours, minutes, and seconds
                const hours = Math.floor(differenceInSeconds / 3600);
                const minutes = Math.floor((differenceInSeconds % 3600) / 60);
                const seconds = differenceInSeconds % 60;

                // Update the HTML elements
                document.getElementById('stopwatch-hours').textContent = pad(hours);
                document.getElementById('stopwatch-minutes').textContent = pad(minutes);
                document.getElementById('stopwatch-seconds').textContent = pad(seconds);
            }

            // Run the function every second
            setInterval(calculateTimeElapsed, 1000);
        </script>
    {% endif %}
{% endblock %}
